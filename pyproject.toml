[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "dram_viz"
description = "A library for visualizing the output of DRAM"
readme = "README.md"
authors = [
    {name = "Madeline Scyphers", email = "mescyphers@gmail.com"},
    {name = "Rory Flynn"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
dynamic = ["version"]

dependencies = [
    'bokeh >=3.0,<4.0',
    'panel >=1.0,<2.0',
    'click <9.0',
    'numpy <2.0',
    'networkx >=2,<3',
    'param >=2.0,<3.0',
    'panel-jstree >=0.3.5,<0.4.0',
    'pandas >=1.2,<3.0',
]

[project.urls]
"Source Code" = "https://github.com/WrightonLabCSU/dram-viz"
"Bug Tracker" = "https://github.com/WrightonLabCSU/dram-viz/issues"


[project.optional-dependencies]
dev = [
    'pytest',
    'pytest-cov',
    'pre-commit',
    'ruff',
]

[tool.setuptools.packages.find]
include = ["dram_viz*"]

[project.scripts]
"dram_viz" = "dram_viz.__main__:main"
"dram.viz" = "dram_viz.__main__:main"

[tool.setuptools_scm]
write_to = "dram_viz/_version.py"

[tool.ruff]
line-length = 120
indent-width = 4

# These are regular expressions (hence the \. is escaping the ., and not a literal \.)
exclude = [
    "_version.py",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Assume Python 3.12
target-version = "py312"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

# pytest settings
[tool.pytest.ini_options]
addopts = "--doctest-modules --doctest-glob='*.rst'"
doctest_optionflags = "NORMALIZE_WHITESPACE"
norecursedirs = "_build"
filterwarnings = ["ignore::DeprecationWarning:invoke"]

# coverage settings
[tool.coverage.run]
branch = true
# patterns of files to exclude from coverage
omit = [
    "_version.py",
    "__init__.py",
    "__main__.py",
    "definitions.py"
    ]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",

    # Ignore imports
    "from",
    "import",

    # ignore getting logger
    "logger = logging",

    ]
